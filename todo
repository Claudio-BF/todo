#!/bin/bash
readonly TODO_PATH="/usr/local/share/todo/"
readonly TEXT_EDITOR=nvim
current_day=$(date +"%d/%m/%Y")
get_input_day() {
  if [[ "$1" =~ '/' ]]; then
    IFS='/' read -r -a arr1 <<<"$1"
    IFS='/' read -r -a arr2 <<<"$current_day"

    # Overlay the strings based on slashes
    result="${1%/}"
    for ((i = ${#arr1[@]}; i < ${#arr2[@]}; i++)); do
      result+="/${arr2[i]}"
    done
    formatted=$(echo "$result" | awk -F'/' '{printf("%s/%s/%s\n", $2, $1, $3)}')
    date -d "$formatted" +"%d-%m-%Y"
  else
    date -d "$1 days" +"%d-%m-%Y"
  fi
}
print_todo() {
  counter=1
  path=$(echo "$TODO_PATH$(echo "$current_day" | tr '/' '-')")
  cat "$path" | while read line; do
    echo "("$counter")" $line
    counter=$((counter + 1))
  done
}
# Check if an argument is provided
if [ -z "$1" ]; then
  print_todo
  exit 1
fi
edit() {
  input=$(get_input_day "$1")
  if [ -z "$input" ]; then
    echo "could not read date"
    exit
  fi
  path=$(echo "$TODO_PATH$(echo "$input" | tr '/' '-')")
  $TEXT_EDITOR "$path"
  if [[ ! -s "$path" ]]; then
    rm "$path"
  fi
}
clear() {
  for file in "$TODO_PATH"*; do
    filename=$(basename "$file")
    if [[ $filename =~ ^[0-9]{2}-[0-9]{2}-[0-9]{4}$ ]]; then
      # Convert dd-mm-yyyy to mm-dd-yyyy for date command
      day=${filename:0:2}
      month=${filename:3:2}
      year=${filename:6:4}
      file_date=$(date -d "$month/$day/$year" +%Y%m%d)
      current_date=$(date +%Y%m%d)
      if [[ $file_date < $current_date ]]; then
        rm "$file"
      fi
    fi
  done
}

# Check if the argument equals the match strings
case "$1" in
"h")
  echo "usage: todo [arg]"
  echo "h: print this help"
  echo "num: edit todo list num days into future"
  echo "dd/mm/yyyy: edit date's todo list, can use dd/ or dd/mm as well"
  echo "c: clear old dates"
  ;;
"c")
  echo "clearing old dates"
  clear
  ;;
*)
  edit $1
  ;;
esac
